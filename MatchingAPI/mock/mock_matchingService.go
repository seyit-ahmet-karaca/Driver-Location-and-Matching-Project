// Code generated by MockGen. DO NOT EDIT.
// Source: .\service\matchingService.go

// Package mock is a generated GoMock package.
package mock

import (
	dto "MatchingAPI/dto"
	util "MatchingAPI/util"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIMatchingService is a mock of IMatchingService interface.
type MockIMatchingService struct {
	ctrl     *gomock.Controller
	recorder *MockIMatchingServiceMockRecorder
}

// MockIMatchingServiceMockRecorder is the mock recorder for MockIMatchingService.
type MockIMatchingServiceMockRecorder struct {
	mock *MockIMatchingService
}

// NewMockIMatchingService creates a new mock instance.
func NewMockIMatchingService(ctrl *gomock.Controller) *MockIMatchingService {
	mock := &MockIMatchingService{ctrl: ctrl}
	mock.recorder = &MockIMatchingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMatchingService) EXPECT() *MockIMatchingServiceMockRecorder {
	return m.recorder
}

// FindDriver mocks base method.
func (m *MockIMatchingService) FindDriver(arg0 *dto.SearchLocation, arg1 util.HttpClient) (*dto.MatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDriver", arg0, arg1)
	ret0, _ := ret[0].(*dto.MatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDriver indicates an expected call of FindDriver.
func (mr *MockIMatchingServiceMockRecorder) FindDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDriver", reflect.TypeOf((*MockIMatchingService)(nil).FindDriver), arg0, arg1)
}
