// Code generated by MockGen. DO NOT EDIT.
// Source: .\service\userService.go

// Package mock is a generated GoMock package.
package mock

import (
	dto "MatchingAPI/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// CreateJWT mocks base method.
func (m *MockIUserService) CreateJWT() *dto.UserResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWT")
	ret0, _ := ret[0].(*dto.UserResponse)
	return ret0
}

// CreateJWT indicates an expected call of CreateJWT.
func (mr *MockIUserServiceMockRecorder) CreateJWT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWT", reflect.TypeOf((*MockIUserService)(nil).CreateJWT))
}

// CreateWrongJWT mocks base method.
func (m *MockIUserService) CreateWrongJWT() *dto.UserResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWrongJWT")
	ret0, _ := ret[0].(*dto.UserResponse)
	return ret0
}

// CreateWrongJWT indicates an expected call of CreateWrongJWT.
func (mr *MockIUserServiceMockRecorder) CreateWrongJWT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWrongJWT", reflect.TypeOf((*MockIUserService)(nil).CreateWrongJWT))
}
